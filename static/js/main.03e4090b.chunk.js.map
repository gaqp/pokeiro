{"version":3,"sources":["pokedolar.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","getPokemon","bind","getEuro","state","pokemon","nome","foto","id","euro","compra","venda","axios","create","baseURL","get","then","response","console","log","setState","data","EUR","ask","bid","Math","trunc","pokeNum","name","sprites","front_default","this","className","src","logo","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,uC,iQCuF5BC,G,wDAjFb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBAEf,EAAKE,MAAQ,CACXC,QAAS,CACPC,KAAM,WACNC,KAAM,uJACNC,GAAI,GAENC,KAAM,CACJC,OAAQ,EACRC,MAAO,IAbM,E,2LAoBXC,IAAMC,OAAO,CACjBC,QAAS,mDACRC,IAAI,KAAKC,MAAK,SAACC,GAChBC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACZX,KAAM,CACJC,OAAQO,EAASI,KAAKC,IAAIC,IAC1BZ,MAAOM,EAASI,KAAKC,IAAIE,OAG7B,EAAKvB,WAAWwB,KAAKC,MAAgC,IAAzB,EAAKtB,MAAMK,KAAKC,Y,2KAK/BiB,G,4FACTf,IAAMC,OAAO,CACjBC,QAAQ,qCAAD,OAAuCa,KAC7CZ,IAAI,KAAKC,MAAK,SAACC,GAChBC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACZf,QAAS,CACPC,KAAMW,EAASI,KAAKO,KACpBrB,KAAMU,EAASI,KAAKQ,QAAQC,oB,uQAO5BC,KAAK5B,U,qIAIX,OACE,yBAAK6B,UAAU,OACb,4BAAQA,UAAU,mBAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,UAE3C,yBAAKH,UAAU,iBACb,yBAAKA,UAAU,iBACb,yBAAKC,IAAKF,KAAK3B,MAAMC,QAAQE,KAAM4B,IAAI,0BACvC,6BACCJ,KAAK3B,MAAMC,QAAQC,KACpB,6BAJF,2BAKoB,iCAAOyB,KAAK3B,MAAMK,KAAKC,QACzC,6BANF,4BAOqB,iCAAOqB,KAAK3B,MAAMK,KAAKE,OAC1C,+BAGJ,uE,GAxEUyB,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.03e4090b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pokedolar.12e55ad5.png\";","import React, { Component } from 'react';\nimport logo from './pokedolar.png';\nimport axios from 'axios'\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.getPokemon = this.getPokemon.bind(this);\n    this.getEuro = this.getEuro.bind(this);\n\n    this.state = {\n      pokemon: {\n        nome: \"Missigno\",\n        foto: \"https://vignette.wikia.nocookie.net/anicrossbr/images/d/d3/Missingno.jpg/revision/latest/scale-to-width-down/180?cb=20180902002439&path-prefix=pt-br\",\n        id: 0\n      },\n      euro: {\n        compra: 0,\n        venda: 0\n      }\n    }\n  }\n\n\n  async getEuro() {\n    await axios.create({\n      baseURL: \"https://economia.awesomeapi.com.br/all/EUR-BRL\"\n    }).get('/').then((response) => {\n      console.log(response)\n      this.setState({\n        euro: {\n          compra: response.data.EUR.ask,\n          venda: response.data.EUR.bid\n        }\n      })\n      this.getPokemon(Math.trunc((this.state.euro.compra * 100)))\n    }\n    );\n  }\n\n  async getPokemon(pokeNum) {\n    await axios.create({\n      baseURL: `https://pokeapi.co/api/v2/pokemon/${pokeNum}`,\n    }).get(\"/\").then((response) => {\n      console.log(response)\n      this.setState({\n        pokemon: {\n          nome: response.data.name,\n          foto: response.data.sprites.front_default,\n\n        }\n      })\n    });\n  }\n  async componentWillMount() {\n    await this.getEuro();\n  }\n  render() {\n\n    return (\n      <div className=\"App\">\n        <header className=\"pokeEuro-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </header>\n        <div className=\"pokeEuro-body\">\n          <div className=\"pokeEuro-card\">\n            <img src={this.state.pokemon.foto} alt=\"Fotinha do pokemão\" />\n            <br />\n            {this.state.pokemon.nome}\n            <br />\n            Cotação de venda: <b>R$ {this.state.euro.compra}</b>\n            <br />\n            Cotação de compra: <b>R$ {this.state.euro.venda}</b>\n            <br />\n          </div>\n        </div>\n        <footer>\n          Esta merda foi copiada de DFCS\n      </footer>\n      </div >\n\n    );\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}